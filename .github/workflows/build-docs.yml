name: Build and Deploy Docs

on:
  push:
    branches:
      - main # Trigger on pushes to your main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to publish to GitHub Pages

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for git-based versioning if needed

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17' # IMPORTANT: Use the Java version your project requires

    # --- Step 1: Generate Javadoc ---
    # This command will generate your Javadoc HTML files.
    # By default for Maven, they go to 'target/site/javadoc'.
    # By default for Gradle, they go to 'build/docs/javadoc'.
    - name: Build Java project and generate Javadoc
      run: |
        # --- For Maven projects ---
        mvn clean install -DskipTests # Build your project first
        mvn javadoc:javadoc           # Generate Javadoc

        # --- For Gradle projects (uncomment and use if you use Gradle instead of Maven) ---
        # # gradle clean build javadoc

    # --- Step 2: Set up Ruby and Jekyll ---
    # GitHub Pages uses Jekyll, which requires Ruby.
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.x' # Use a recent Ruby version compatible with Jekyll
        bundler-cache: true # Installs Jekyll and other Ruby gems

    # --- Step 3: Build Jekyll Site ---
    # This processes your Markdown files in /docs and creates /docs/_site.
    # It will *exclude* the javadoc folder as per your _config.yml.
    - name: Build Jekyll site
      run: |
        cd docs # Change working directory to the /docs folder
        bundle exec jekyll build # Run Jekyll build command
      env:
        JEKYLL_ENV: production # Ensures Jekyll builds for production (e.g., no draft posts)

    # --- Step 4: CRUCIAL: Copy Generated Javadoc into Jekyll's Output ---
    # This step takes your Javadoc files and places them inside the folder
    # that Jekyll generated, so they get deployed to GitHub Pages.
    - name: Copy Javadoc into Jekyll's _site directory
      run: |
        # Define the source directory of your generated Javadoc HTML
        # Adjust this path based on your build tool's actual output location:
        #   - For Maven: "target/site/javadoc"
        #   - For Gradle: "build/docs/javadoc"
        JAVADOC_SOURCE_DIR="target/site/javadoc" # <--- ADJUST THIS LINE IF NEEDED

        # Define the destination directory inside Jekyll's output:
        # Jekyll outputs to 'docs/_site', so Javadoc needs to go into 'docs/_site/javadoc'
        JAVADOC_DEST_DIR="docs/_site/javadoc"

        echo "Copying Javadoc from $JAVADOC_SOURCE_DIR to $JAVADOC_DEST_DIR"
        mkdir -p "$JAVADOC_DEST_DIR" # Ensure the destination directory exists
        cp -r "$JAVADOC_SOURCE_DIR"/* "$JAVADOC_DEST_DIR"/ # Copy all contents recursively

    # --- Step 5: Deploy the Combined Site to GitHub Pages ---
    # This action takes the entire 'docs/_site' directory and publishes it.
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_site # Tell the action to publish Jekyll's output directory
        # If you were deploying to a separate 'gh-pages' branch, you'd uncomment this:
        # publish_branch: gh-pages
